{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'getword' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-7-49bab9f5b311>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     20\u001b[0m     \u001b[0mgetword\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mentry\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     21\u001b[0m     \u001b[0mlanguages\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlanguage\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 22\u001b[1;33m \u001b[1;32mif\u001b[0m \u001b[0mgetword\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m\"\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     23\u001b[0m             \u001b[0mmessagebox\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mshowerror\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Dictionary'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'please write the word'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     24\u001b[0m \u001b[1;32melif\u001b[0m \u001b[0mlanguages\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'English-to-English'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'getword' is not defined"
     ]
    }
   ],
   "source": [
    "from tkinter import *\n",
    "import tkinter as tk\n",
    "from tkinter import ttk\n",
    "from tkinter import messagebox\n",
    "from PIL import ImageTk,Image\n",
    "from PyDictionary import PyDictionary\n",
    "from googletrans import Translator\n",
    "root = tk.Tk()\n",
    "root.title('Dictionary')\n",
    "root.geometry('600x300')\n",
    "root['bg'] = 'white'\n",
    "frame =Frame(\n",
    "root,width=200,height=300,borderwidth=1,relief=RIDGE)\n",
    "frame.grid(sticky=\"W\")\n",
    "\n",
    "\n",
    "def get_meaning(): \n",
    "    global get_word\n",
    "    dictionary = PyDictionary()\n",
    "    get_word = entry.get()\n",
    "    languages = language.get()\n",
    "if get_word == \"\":\n",
    "            messagebox.showerror('Dictionary','please write the word')\n",
    "elif languages == 'English-to-English':\n",
    "             d = dictionary.meaning(get_word)\n",
    "             output.insert('end',d['Noun'])\n",
    "elif languages == 'English-to-Hindi':\n",
    "    translator = Translator()\n",
    "    t=translator.translate(get_word,dest='hi')\n",
    "output.insert('end',t.text)\n",
    "\n",
    "def quit():\n",
    "    root.destroy()\n",
    "    \n",
    "img=ImageTk.PhotoImage(IMage.open('dict.png'))\n",
    "pic = Label(root, image = img)\n",
    "pic.place(x=40,y=70)\n",
    "word = Label(root,text=\"Enter Word\",bg=\"white\",font=('verdana',10,'bold'))\n",
    "word.place(x=250,y=23)\n",
    "a = tk.StringVar()\n",
    "language = ttk.Combobox(root,width=20,textvariable = a, stage='readonly',font=('verdana',10,'bold'),)\n",
    "\n",
    "language['values'] = (\n",
    "    'English-to-English',\n",
    "     'English-to-Hindi',\n",
    ")\n",
    "language.place(x=380,y=10)\n",
    "language.current(0)\n",
    " \n",
    "    \n",
    "entry = Entry(root,width=50,borderwidth=2,relief=RIDGE)\n",
    "entry.place(x=250,y=50)\n",
    "search = Button(root,text=\"Search\",font=('verdana',10,'bold'),cursor=\"hand2\",relief=RIDGE,command=get_meaning)\n",
    "search.place(x=430,y=80)\n",
    "quit = Button(root,text=\"Quit\",font=\n",
    "             ('verdana',10,'bold'),cursor=\"hand2\",relief=RIDGE,command=quit)\n",
    "quit.place(x=510,y=80)\n",
    "meaning.place(x=230,y=120)\n",
    "output = Text(root,height=8,width=40,borderwidth=2,relief=RIDGE)\n",
    "output.place(x=230,y=160)\n",
    "\n",
    "root.mainloop()\n",
    "             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
